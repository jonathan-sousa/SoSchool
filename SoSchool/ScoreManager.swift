//
//  ScoreManager.swift
//  SoSchool
//
//  Created by Jonathan Sousa on 03/08/2025.
//

import SwiftUI
import SwiftData

/// Gestionnaire des scores et records avec SwiftData
@Observable
class ScoreManager {
    var currentScore = 0
    var maxScore = 10
    var elapsedTime: TimeInterval = 0
    var isTimerRunning = false

    private var timer: Timer?
    private var startTime: Date?

    /// D√©marrer le timer
    func startTimer() {
        startTime = Date()
        isTimerRunning = true
        timer = Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true) { _ in
            if let startTime = self.startTime {
                self.elapsedTime = Date().timeIntervalSince(startTime)
            }
        }
    }

    /// Arr√™ter le timer
    func stopTimer() {
        timer?.invalidate()
        timer = nil
        isTimerRunning = false
    }

    /// R√©initialiser le score
    func resetScore() {
        currentScore = 0
        elapsedTime = 0
        stopTimer()
    }

    /// Incr√©menter le score
    func incrementScore() {
        currentScore += 1
    }

    /// Formater le temps √©coul√©
    private func formatTime(_ time: TimeInterval) -> String {
        let minutes = Int(time) / 60
        let seconds = Int(time) % 60
        return String(format: "%02d:%02d", minutes, seconds)
    }

    /// Sauvegarder le score final
    func saveScore(modelContext: ModelContext, child: Child, exerciseType: ExerciseType, level: Level) {
        print("üíæ === D√âBUT SAUVEGARDE SCORE SWIFTDATA ===")
        print("üíæ Type: \(exerciseType.rawValue), Niveau: \(level.rawValue)")
        print("üíæ Enfant: \(child.firstName)")
        print("üìä Score r√©el obtenu : \(currentScore)/\(maxScore)")

        // V√©rifier si c'est un nouveau record
        let isNewRecord = self.isNewRecord(modelContext: modelContext, exerciseType: exerciseType, level: level)

        if isNewRecord {
            print("üèÜ Nouveau record d√©tect√© !")

            // Supprimer l'ancien record s'il existe
            deleteOldScore(modelContext: modelContext, exerciseType: exerciseType, level: level)

            // Cr√©er le nouveau record
            createNewScore(modelContext: modelContext, child: child, exerciseType: exerciseType, level: level, score: currentScore)
        } else {
            print("üèÜ Premier record !")
            createNewScore(modelContext: modelContext, child: child, exerciseType: exerciseType, level: level, score: currentScore)
        }

        print("üíæ === FIN SAUVEGARDE SCORE SWIFTDATA ===")
    }

    /// Cr√©er un nouveau score
    private func createNewScore(modelContext: ModelContext, child: Child, exerciseType: ExerciseType, level: Level, score: Int) {
        print("üíæ Cr√©ation du nouveau score...")

        // R√©cup√©rer ou cr√©er l'exercice
        let exercise = getOrCreateExercise(modelContext: modelContext, exerciseType: exerciseType, level: level)
        print("üèÉ Exercice trouv√© : \(exercise.displayName)")

        // Cr√©er le nouveau score
        let newScore = Score(score: score, maxScore: maxScore, elapsedTime: elapsedTime)
        newScore.child = child
        newScore.exercise = exercise

        // Ajouter √† la base de donn√©es
        modelContext.insert(newScore)

        print("üíæ Nouveau record cr√©√© : \(score)/\(maxScore)")
        print("üíæ Exercice assign√© : \(exercise.displayName)")
        print("üíæ Enfant assign√© : \(child.firstName)")

        do {
            try modelContext.save()
            print("‚úÖ ModelContext.save() r√©ussi")
            print("üèÜ Nouveau record sauvegard√© : \(score)/\(maxScore) en \(formatTime(elapsedTime))")
        } catch {
            print("‚ùå Erreur lors de la sauvegarde : \(error)")
        }
    }

    /// R√©cup√©rer le meilleur score pour un exercice et niveau
    func getBestScore(modelContext: ModelContext, exerciseType: ExerciseType, level: Level) -> (score: Int, maxScore: Int, time: TimeInterval)? {
        // Debug: V√©rifier tous les scores dans la base
        let allScoresDescriptor = FetchDescriptor<Score>()

        do {
            let allScores = try modelContext.fetch(allScoresDescriptor)
            print("üîç Total des scores dans la base : \(allScores.count)")

            for score in allScores {
                print("üìä Score : \(score.score)/\(score.maxScore) - Exercice: \(score.exercise?.displayName ?? "nil")")
            }
        } catch {
            print("‚ùå Erreur lors de la r√©cup√©ration de tous les scores : \(error)")
        }

        // Chercher les records sp√©cifiques pour ce type et niveau
        let fetchDescriptor = FetchDescriptor<Score>(
            sortBy: [SortDescriptor(\.score, order: .reverse), SortDescriptor(\.completedAt, order: .forward)]
        )

        do {
            let allScores = try modelContext.fetch(fetchDescriptor)

            // Filtrer manuellement par type et niveau
            let filteredScores = allScores.filter { score in
                score.exercise?.type == exerciseType.rawValue && score.exercise?.level == level.rawValue
            }

            print("üîç Recherche de records pour \(exerciseType.displayName) - \(level.displayName)")
            print("üîç Scores trouv√©s : \(filteredScores.count)")

            if let bestScore = filteredScores.first {
                print("üèÜ Record trouv√© : \(bestScore.score)/\(bestScore.maxScore) en \(formatTime(bestScore.elapsedTime))")
                return (score: bestScore.score, maxScore: bestScore.maxScore, time: bestScore.elapsedTime)
            } else {
                print("‚ùå Aucun record trouv√©")
            }
        } catch {
            print("‚ùå Erreur lors de la r√©cup√©ration du meilleur score : \(error)")
        }
        return nil
    }

    /// V√©rifier si le score actuel bat le record
    func isNewRecord(modelContext: ModelContext, exerciseType: ExerciseType, level: Level) -> Bool {
        guard let bestScore = getBestScore(modelContext: modelContext, exerciseType: exerciseType, level: level) else {
            return true // Premier score
        }

        return currentScore > bestScore.score || (currentScore == bestScore.score && elapsedTime < bestScore.time)
    }

    /// R√©cup√©rer ou cr√©er un exercice
    private func getOrCreateExercise(modelContext: ModelContext, exerciseType: ExerciseType, level: Level) -> Exercise {
        print("üèÉ Recherche d'exercice existant : \(exerciseType.rawValue) - \(level.rawValue)")

        let fetchDescriptor = FetchDescriptor<Exercise>()

        do {
            let existingExercises = try modelContext.fetch(fetchDescriptor)

            // Filtrer par type et niveau
            let filteredExercises = existingExercises.filter { exercise in
                exercise.type == exerciseType.rawValue && exercise.level == level.rawValue
            }

            if let existingExercise = filteredExercises.first {
                print("üèÉ Exercice existant trouv√© : \(existingExercise.displayName)")
                return existingExercise
            }
        } catch {
            print("‚ùå Erreur lors de la recherche d'exercice : \(error)")
        }

        // Cr√©er un nouvel exercice de r√©f√©rence
        print("üèÉ Cr√©ation d'un nouvel exercice de r√©f√©rence")
        let newExercise = Exercise(
            type: exerciseType.rawValue,
            verb: "",
            level: level.rawValue,
            sentence: "",
            correctAnswer: "",
            subject: ""
        )

        modelContext.insert(newExercise)

        do {
            try modelContext.save()
            print("‚úÖ Nouvel exercice de r√©f√©rence cr√©√© : \(exerciseType.rawValue) - \(level.rawValue)")
        } catch {
            print("‚ùå Erreur lors de la cr√©ation de l'exercice : \(error)")
        }

        return newExercise
    }

    /// Supprimer l'ancien record
    private func deleteOldScore(modelContext: ModelContext, exerciseType: ExerciseType, level: Level) {
        print("üóëÔ∏è === D√âBUT SUPPRESSION ANCIEN RECORD ===")

        let fetchDescriptor = FetchDescriptor<Score>()

        do {
            let allScores = try modelContext.fetch(fetchDescriptor)

            // Filtrer par type et niveau
            let scoresToDelete = allScores.filter { score in
                score.exercise?.type == exerciseType.rawValue && score.exercise?.level == level.rawValue
            }

            print("üóëÔ∏è Suppression de \(scoresToDelete.count) ancien(s) record(s)")

            for score in scoresToDelete {
                print("üóëÔ∏è Suppression du score : \(score.score)/\(score.maxScore)")
                modelContext.delete(score)
                print("üóëÔ∏è Ancien record supprim√© : \(score.score)/\(score.maxScore)")
            }

            try modelContext.save()
            print("‚úÖ Suppression des anciens records sauvegard√©e")

        } catch {
            print("‚ùå Erreur lors de la suppression de l'ancien record : \(error)")
        }

        print("üóëÔ∏è === FIN SUPPRESSION ANCIEN RECORD ===")
    }
}

/// Extension pour les propri√©t√©s d'affichage
extension ScoreManager {
    var formattedElapsedTime: String {
        formatTime(elapsedTime)
    }

    var scorePercentage: Double {
        guard maxScore > 0 else { return 0 }
        return Double(currentScore) / Double(maxScore)
    }
}
